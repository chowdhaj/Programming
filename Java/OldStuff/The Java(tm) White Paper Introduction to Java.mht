From: <Saved by Windows Internet Explorer 7>
Subject: The Java(tm) White Paper: Introduction to Java
Date: Wed, 4 Feb 2009 11:46:47 -0500
MIME-Version: 1.0
Content-Type: text/html;
	charset="iso-8859-2"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.cab.u-szeged.hu/WWW/java/whitepaper/java-whitepaper-3.html
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2900.5512

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- Generated by Harlequin Webmaker 2.0; Transducer 1.0.1 =
--><HTML><HEAD><TITLE>The Java(tm) White Paper: Introduction to =
Java</TITLE>
<META http-equiv=3DContent-Type content=3D"text/html; =
charset=3Diso-8859-2">
<META content=3D"MSHTML 6.00.6000.16640" name=3DGENERATOR></HEAD>
<BODY><A name=3DHEADING3></A><A=20
href=3D"http://www.cab.u-szeged.hu/WWW/java/whitepaper/java-whitepaper-4.=
html">Next</A>=20
<A=20
href=3D"http://www.cab.u-szeged.hu/WWW/java/whitepaper/java-whitepaper-2.=
html">Prev</A>=20
<A=20
href=3D"http://www.cab.u-szeged.hu/WWW/java/whitepaper/java-whitepaper-1.=
html">Contents</A>
<P>
<HR>

<H1>Introduction to Java </H1>
<DL>
  <DT><A=20
  =
href=3D"http://www.cab.u-szeged.hu/WWW/java/whitepaper/java-whitepaper-3.=
html#HEADING3-22"><B>1.1=20
  </B>- Beginnings of the Java Language Project</A>
  <DD>
  <DT><A=20
  =
href=3D"http://www.cab.u-szeged.hu/WWW/java/whitepaper/java-whitepaper-3.=
html#HEADING3-25"><B>1.2=20
  </B>- Design Goals of Java</A>
  <DD>
  <DT><A=20
  =
href=3D"http://www.cab.u-szeged.hu/WWW/java/whitepaper/java-whitepaper-3.=
html#HEADING3-50"><B>1.3=20
  </B>- The Java Base System</A>
  <DD>
  <DT><A=20
  =
href=3D"http://www.cab.u-szeged.hu/WWW/java/whitepaper/java-whitepaper-3.=
html#HEADING3-56"><B>1.4=20
  </B>- The Java Environment--a New Approach to Distributed =
Computing</A>
  <DD></DD></DL>
<HR>
<A name=3DHEADING3-0></A>
<P>
<P>The Next Stage of the Known,<BR>Or a Completely New Paradigm?
<P>Taiichi Sakaiya--<I>The Knowledge-Value Revolution</I>
<P>
<P>
<P><B>The Software Developer's Burden</B>
<P>Imagine you're a software application developer. Your programming =
language of=20
choice (or the language that's been foisted on you) is C or C++ . You've =
been at=20
this for quite a while and your job doesn't seem to be getting any =
easier. These=20
past few years you've seen the growth of multiple incompatible hardware=20
architectures, each supporting multiple incompatible operating systems, =
with=20
each platform operating with one or more incompatible graphical user =
interfaces.=20
Now you're supposed to cope with all this and make your applications =
work in a=20
distributed client-server environment. The growth of the Internet, the=20
World-Wide Web, and "electronic commerce" have introduced new dimensions =
of=20
complexity into the development process.
<P>The tools you use to develop applications don't seem to help you =
much. You're=20
still coping with the same old problems; the fashionable new =
object-oriented=20
techniques seem to have added new problems without solving the old ones. =
You say=20
to yourself and your friends, "There <I>has</I> to be a better way"!=20
<P><B></B>
<P><B>The Better Way is Here Now</B>
<P>Now there <I>is</I> a better way--it's the <I>Java</I>&#8364; =
<I>programming=20
language environment</I> ("Java" for short) from Sun Microsystems. =
Imagine, if=20
you will, this development world...
<P>
<UL>
  <LI>Your programming language is<I> object oriented, </I>yet it's =
still=20
  dead<I> simple.</I>
  <P></P>
  <LI>Your development cycle is much <I>faster</I> because Java is<I>=20
  interpreted</I>. The compile-link-load-test-crash-debug cycle is =
obsolete--now=20
  you just compile and run.
  <P></P>
  <LI>Your applications are <I>portable</I> across multiple platforms. =
Write=20
  your applications once, and you never need to port them--they will run =
without=20
  modification on multiple operating systems and hardware architectures.
  <P></P>
  <LI>Your applications are <I>robust</I> because the Java run-time =
system=20
  manages memory for you.
  <P></P>
  <LI>Your interactive graphical applications have <I>high =
performance</I>=20
  because multiple concurrent threads of activity in your application =
are=20
  supported by the <I>multithreading</I> built into Java environment.
  <P></P>
  <LI>Your applications are<I> adaptable</I> to changing environments =
because=20
  you can dynamically download code modules from anywhere on the =
network.
  <P></P>
  <LI>Your end users can trust that your applications are <I>secure</I>, =
even=20
  though they're downloading code from all over the Internet; the Java =
run-time=20
  system has built-in protection against viruses and tampering.
  <P></P></LI></UL>You don't need to dream about these features. They're =
here now.=20
The Java Programming Language Environment provides a <I>portable</I>,=20
<I>interpreted</I>, <I>high-performance</I>, <I>simple</I>,=20
<I>object-oriented</I> programming language and supporting run-time =
environment.=20
This introductory chapter provides you with a brief look at the main =
design=20
goals of the Java system; the remainder of this paper examines the =
features of=20
Java in more detail.=20
<P>At the end of this paper you'll find a chapter that describes the =
<I>HotJava&#8364;=20
Browser</I> ("HotJava" for short). HotJava is an innovative World-Wide =
Web=20
browser, and the first major applications written using the Java =
environment.=20
HotJava is the first browser to dynamically download and execute Java =
code=20
fragments from anywhere on the Internet, and to so so in a secure =
manner.=20
<P><A name=3DHEADING3-23></A>
<HR>

<H2>1.1 Beginnings of the Java Language Project</H2>Java is designed to =
meet the=20
challenges of application development in the context of heterogeneous,=20
network-wide distributed environments. Paramount among these challenges =
is=20
secure delivery of applications that consume the minimum of system =
resources,=20
can run on any hardware and software platform, and can be extended =
dynamically.
<P>Java originated as part of a research project to develop advanced =
software=20
for a wide variety of networked devices and embedded systems. The goal =
was to=20
develop a small, reliable, portable, distributed, real-time operating=20
environment. When the project started, C++ was the language of choice. =
But over=20
time the difficulties encountered with C++ grew to the point where the =
problems=20
could best be addressed by creating an entirely new language =
environment. Design=20
and architecture decisions drew from a variety of languages such as =
Eiffel,=20
SmallTalk, Objective C, and Cedar/Mesa. The result is a language =
environment=20
that has proven ideal for developing secure, distributed, network-based =
end-user=20
applications in environments ranging from networked-embedded devices to =
the=20
World-Wide Web and the desktop.
<P><A name=3DHEADING3-26></A>
<HR>

<H2>1.2 Design Goals of Java</H2>The design requirements of Java are =
driven by=20
the nature of the computing environments in which software must be =
deployed.
<P>The massive growth of the Internet and the World-Wide Web leads us to =
a=20
completely new way of looking at development and distribution of =
software. To=20
live in the world of electronic commerce and distribution, Java must =
enable the=20
development of <I>secure, high performance,</I> and highly <I>robust</I> =

applications on <I>multiple platforms</I> in <I>heterogeneous</I>,=20
<I>distributed</I> <I>networks</I>.
<P>Operating on multiple platforms in heterogeneous networks invalidates =
the=20
traditional schemes of binary distribution, release, upgrade, patch, and =
so on.=20
To survive in this jungle, Java must be <I>architecture neutral</I>,=20
<I>portable</I>, and <I>dynamically adaptable</I>.=20
<P>The Java system that emerged to meet these needs is <I>simple</I>, so =
it can=20
be easily programmed by most developers; <I>familiar</I>, so that =
current=20
developers can easily learn Java; <I>object oriented</I>, to take =
advantage of=20
modern software development methodologies and to fit into distributed=20
client-server applications; <I>multithreaded</I>, for high performance =
in=20
applications that need to perform multiple concurrent activities, such =
as=20
multimedia; and <I>interpreted</I>, for maximum portability and dynamic=20
capabilities.
<P>Together, the above requirements comprise quite a collection of =
buzzwords, so=20
let's examine some of them and their respective benefits before going =
on.
<P>
<H3>1.2.1 Simple, Object Oriented, and Familiar</H3>Primary =
characteristics of=20
Java include a <I>simple</I> language that can be programmed without =
extensive=20
programmer training while being attuned to current software practices. =
The=20
fundamental concepts of Java are grasped quickly; programmers can be =
productive=20
from the very beginning.
<P>Java is designed to be <I>object oriented</I> from the ground up. =
Object=20
technology has finally found its way into the programming mainstream =
after a=20
gestation period of thirty years. The needs of distributed, =
client-server based=20
systems coincide with the encapsulated, message-passing paradigms of=20
object-based software. To function within increasingly complex, =
network-based=20
environments, programming systems must adopt object-oriented concepts. =
Java=20
provides a clean and efficient object-based development environment.
<P>Programmers using Java can access existing libraries of tested =
objects that=20
provide functionality ranging from basic data types through I/O and =
network=20
interfaces to graphical user interface toolkits. These libraries can be =
extended=20
to provide new behavior.
<P>Even though C++ was rejected as an implementation language, keeping =
Java=20
looking like C++ as far as possible results in Java being a =
<I>familiar</I>=20
language, while removing the unnecessary complexities of C++. Having =
Java retain=20
many of the object-oriented features and the "look and feel" of C++ =
means that=20
programmers can migrate easily to Java and be productive quickly.
<P>
<H3>1.2.2 Robust and Secure</H3>Java is designed for creating highly=20
<I>reliable</I> software. It provides extensive compile-time checking, =
followed=20
by a second level of run-time checking. Language features guide =
programmers=20
towards reliable programming habits. The memory management model--no =
pointers or=20
pointer arithmetic--eliminates entire classes of programming errors that =
bedevil=20
C and C++ programmers. You can develop Java language code with =
confidence that=20
the system will find many errors quickly and that major problems won't =
lay=20
dormant until after your production code has shipped.
<P>Java is designed to operate in distributed environments, which means =
that=20
<I>security</I> is of paramount importance. With security features =
designed into=20
the language and run-time system, Java lets you construct applications =
that=20
can't be invaded from outside. In the networked environment, =
applications=20
written in Java are secure from intrusion by unauthorized code =
attempting to get=20
behind the scenes and create viruses or invade file systems.
<P>
<H3>1.2.3 Architecture Neutral and Portable</H3>Java is designed to =
support=20
applications that will be deployed into heterogeneous networked =
environments. In=20
such environments, applications must be capable of executing on a =
variety of=20
hardware architectures. Within this variety of hardware platforms, =
applications=20
must execute atop a variety of operating systems and interoperate with =
multiple=20
programming language interfaces. To accommodate the diversity of =
operating=20
environments, the Java compiler generates <I>bytecodes</I>--an =
<I>architecture=20
neutral</I> intermediate format designed to transport code efficiently =
to=20
multiple hardware and software platforms. The interpreted nature of Java =
solves=20
both the binary distribution problem and the version problem; the same =
Java=20
language byte codes will run on any platform.
<P>Architecture neutrality is just one part of a truly <I>portable</I> =
system.=20
Java takes portability a stage further by being strict in its definition =
of the=20
basic language. Java puts a stake in the ground and specifies the sizes =
of its=20
basic data types and the behavior of its arithmetic operators. Your =
programs are=20
the same on every platform--there are no data type incompatibilities =
across=20
hardware and software architectures.
<P>The architecture-neutral and portable language environment of Java is =
known=20
as the <I>Java Virtual Machine</I>. It's the specification of an =
abstract=20
machine for which Java language compilers can generate code. Specific=20
implementations of the Java Virtual Machine for specific hardware and =
software=20
platforms then provide the concrete realization of the virtual machine. =
The Java=20
Virtual Machine is based primarily on the POSIX interface =
specification--an=20
industry-standard definition of a portable system interface. =
Implementing the=20
Java Virtual Machine on new architectures is a relatively =
straightforward task=20
as long as the target platform meets basic requirements such as support =
for=20
multithreading.
<P>
<H3>1.2.4 High Performance</H3><I>Performance</I> is always a =
consideration.=20
Java achieves superior performance by adopting a scheme by which the =
interpreter=20
can run at full speed without needing to check the run-time environment. =
The=20
<I>automatic garbage collector</I> runs as a low-priority background =
thread,=20
ensuring a high probability that memory is available when required, =
leading to=20
better performance. Applications requiring large amounts of compute =
power can be=20
designed such that compute-intensive sections can be rewritten in native =
machine=20
code as required and interfaced with the Java environment. In general, =
users=20
perceive that interactive applications respond quickly even though =
they're=20
interpreted.
<P>
<H3>1.2.5 Interpreted, Threaded, and Dynamic</H3>The <I>Java =
interpreter</I> can=20
execute Java bytecodes directly on any machine to which the interpreter =
and=20
run-time system have been ported. In an interpreted environment such as =
Java=20
system, the link phase of a program is simple, incremental, and =
lightweight. You=20
benefit from much faster development cycles--prototyping, =
experimentation, and=20
rapid development are the normal case, versus the traditional =
heavyweight=20
compile, link, and test cycles.
<P>Modern network-based applications, such as the HotJava World-Wide Web =

browser, typically need to do several things at the same time. A user =
working=20
with HotJava can run several animations concurrently while downloading =
an image=20
and scrolling the page. Java's <I>multithreading</I> capability provides =
the=20
means to build applications with many concurrent threads of activity.=20
Multithreading thus results in a high degree of interactivity for the =
end user.
<P>Java supports multithreading at the language level with the addition =
of=20
sophisticated synchronization primitives: the language library provides =
the=20
<CODE>Thread</CODE> class, and the run-time system provides monitor and=20
condition lock primitives. At the library level, moreover, Java's =
high-level=20
system libraries have been written to be <I>thread safe</I>:<I> </I>the=20
functionality provided by the libraries is available without conflict to =

multiple concurrent threads of execution.
<P>While the Java compiler is strict in its compile-time static =
checking, the=20
language and run-time system are <I>dynamic</I> in their linking stages. =
Classes=20
are linked only as needed. New code modules can be linked in on demand =
from a=20
variety of sources, even from sources across a network. In the case of =
the=20
HotJava browser and similar applications, interactive executable code =
can be=20
loaded from anywhere, which enables transparent updating of =
applications. The=20
result is on-line services that constantly evolve; they can remain =
innovative=20
and fresh, draw more customers, and spur the growth of electronic =
commerce on=20
the Internet.=20
<P><A name=3DHEADING3-51></A>
<HR>

<H2>1.3 The Java Base System</H2>The complete Java system includes a =
number of=20
libraries of utility classes and methods of use to developers in =
creating=20
multi-platform applications. Very briefly, these libraries are:
<P><CODE>java.lang</CODE>--the collection of base types (language types) =
that=20
are always imported into any given compilation unit. This where you'll =
find the=20
declarations of <CODE>Object</CODE> (the root of the class hierarchy) =
and=20
<CODE>Class</CODE>, plus threads, exceptions, wrappers for the primitive =
data=20
types, and a variety of other fundamental classes.
<P><CODE>java.io</CODE>--streams and random-access files. This is where =
you find=20
the rough equivalent of the Standard I/O Library you're familiar with on =
most=20
UNIX systems. A further library is called <CODE>java.net</CODE>, and =
provides=20
support for sockets, telnet interfaces, and URLs.
<P><CODE>java.util</CODE>--container and utility classes. Here you'll =
find=20
classes such as <CODE>Dictionary</CODE>, <CODE>HashTable</CODE>, and=20
<CODE>Stack</CODE>, among others, plus encoder and decoder techniques, =
and=20
<CODE>Date</CODE> and <CODE>Time</CODE> classes.
<P><CODE>java.awt</CODE>--an Abstract Windowing Toolkit that provides an =

abstract layer enabling you to port Java applications easily from one =
window=20
system to another. This library contains classes for basic interface =
components=20
such as events, colors, fonts, and controls such as buttons and =
scrollbars.
<P><A name=3DHEADING3-57></A>
<HR>

<H2>1.4 The Java Environment--a New Approach to Distributed =
Computing</H2>Taken=20
individually, the characteristics discussed above can be found in a =
variety of=20
software development environments. What's completely new is the manner =
in which=20
Java and its run-time system have combined them to produce a flexible =
and=20
powerful programming system.
<P>Developing your applications using Java results in software that is =
portable=20
across multiple machine architectures, operating systems, and graphical =
user=20
interfaces, secure, and high performance. With Java, your job as a =
software=20
developer is much easier--you focus your full attention on the end goal =
of=20
shipping innovative products on time, based on the solid foundation of =
Java. The=20
<I>better way</I> to develop software is here, now, brought to you by =
the Java=20
language environment.
<P>
<HR>
<A=20
href=3D"http://www.cab.u-szeged.hu/WWW/java/whitepaper/java-whitepaper-4.=
html">Next</A>=20
<A=20
href=3D"http://www.cab.u-szeged.hu/WWW/java/whitepaper/java-whitepaper-2.=
html">Prev</A>=20
<A=20
href=3D"http://www.cab.u-szeged.hu/WWW/java/whitepaper/java-whitepaper-1.=
html">Contents</A>
<P><B>The Java(tm) Language Environment: A White Paper</B>
<P></P></BODY></HTML>
